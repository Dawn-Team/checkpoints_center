1、 配置个人用户名及邮箱
    $ git config --global user.name "Sparkle"
    $ git config --global user.email "514037009@qq.com"
2、 创建版本库
    $ mkdir（make directory） learngit 
    $ cd learngit
    $ git init    将该目录变成Git可管理的仓库(.git目录用于跟踪管理版本库)
    $ git add readme.txt 把文件添加到仓库
    $ git commit -m "wrote a readme file"  把文件提交到仓库
ls（List files） – ah  显示隐藏文件夹
git add . 用于添加该目录下所有文件
3、 时光机穿梭
    $ git status 用于查看仓库的当前状态
    $ git diff readme.txt  查看修改的内容
    $ git log  显示从最近到最远的提交日志
    $ git reset --hard HEAD^  HEAD^为上一个版本，上上个版本即HEAD^^
    $ cat readme.txt  cat 命令用于查看文件内容
    $ git reset --hard 3628164 根据commit id 回退版本，commit id 可不写全，Git会自动查找
    $ git reflog 用来记录每一次的命令
    Commit id为版本号，HEAD只想的版本即当前版本
    Git add 命令是将要提交的所有修改放到暂存区，然后执行git commit 可以将暂存区中的所有修改提交到分支
    Git add 文件之后，若对该文件再次做了修改，需要再次add  
    $ git checkout -- readme.txt  丢弃工作区的修改、删除 (已add未commit)
    $ git reset HEAD readme.txt   丢弃修改（已commit） 在checkout
    若已提交不合适的修改到版本库，要撤销提交则可版本回退
4、 远程仓库
创建SSH Key。
    $ ssh-keygen -t rsa -C "youremail@example.com"
    注：SSH Key相当于公钥，GitHub需要通过公钥确认是你推送的提交
    从远程库克隆
    $ git clone git@github.com:Sparkleiii/gitskills.git
                  用户名/项目名
    Git支持多种协议，包括https,但通过SSH支持的原生git协议生成速度最快
5、 分支管理
    https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013743862006503a1c5bf5a783434581661a3cc2084efa000
    查看分支：git branch
    创建分支：git branch <name>
    切换分支：git checkout <name>
    创建+切换分支：git checkout -b <name>
    合并某分支到当前分支：git merge <name>
    删除分支：git branch -d  <name>

    当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
    用git log --graph命令可以看到分支合并图。
    合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
    修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
    当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
    开发一个新feature，最好新建一个分支；
    如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
    查看远程库信息，使用git remote -v；
    本地新建的分支如果不推送到远程，对其他人就是不可见的；
    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
6、 标签管理
   命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
　　git tag -a <tagname> -m "..."可以指定标签信息；
　　git tag -s <tagname> -m "..."可以用PGP签名标签；
　　命令git tag可以查看所有标签。
　　命令git push origin <tagname>可以推送一个本地标签；
　　命令git push origin --tags可以推送全部未推送过的本地标签；
　　命令git tag -d <tagname>可以删除一个本地标签；
　　命令git push origin :refs/tags/<tagname>可以删除一个远程标签。


